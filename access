#!/usr/bin/env ruby
require 'yaml'
require 'aws-sdk-ec2'

config_file = ARGV[2]
config = YAML.load(File.read(config_file ? config_file : './config.yml'))

AWS_ACCESS_KEY_ID = config['aws']['access_key_id']
AWS_SECRET_ACCESS_KEY = config['aws']['secret_access_key']
AWS_REGION = config['aws']['aws_region']
SERVER_LISTS = config['servers']

server = ARGV[0]
raise Exception.new('Server not found') unless SERVER_LISTS.keys.include?(server)

identity_file = ARGV[1]
raise Exception.new('Identity file not found') unless identity_file

credentials = Aws::Credentials.new(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
ec2 = Aws::EC2::Client.new(region: AWS_REGION, credentials: credentials)
server_description = ec2.describe_instances(
  filters: [
    {
      name: 'tag:Name',
      values: [SERVER_LISTS[server]]
    }
  ]
)

# https://docs.aws.amazon.com/sdk-for-ruby/v2/api/Aws/EC2/Types/InstanceState.html#name-instance_method
private_ip_address = server_description.reservations.map do |reservation|
  reservation.instances.map do |instance|
    next if instance.state.name != 'running'

    instance.private_ip_address
  end
end

ip = private_ip_address.flatten.first

raise Exception, 'Private IP address not found' unless ip.present?

exec("ssh -i '#{identity_file}' ec2-user@#{ip}")
